/**
 * Machine Problem: Shell
 * CS 241 - Fall 2016
 */
#include "format.h"
#include "shell.h"
#include "vector.h"
#include "string.h"
 #include <stdio.h>
#include <unistd.h>

//volatile __sig_atomic_t pleaseStop;

typedef struct process {
  char *command;
  char *status;
  pid_t pid;
} process;



void *process_copy_constructor(void *elem) { 
	process* newone = calloc(1,sizeof(process));
	process* oldone = (process*)elem; 
	char* newCm;
	char* newSt;


	if (oldone->command != NULL)
	{
		newCm = strdup(oldone->command);
	}
	else
		newCm = NULL;
	if (oldone->status != NULL)
	{
	    newSt = strdup(oldone->status);
	}
	else
		newSt = NULL;
	newone->command = newCm;
	newone->status = newSt;
	newone->pid = oldone->pid;
	return newone;
}

void process_destructor(void *elem) {
  if(elem == NULL)
  	return;
  process* oldone = (process*)elem; 

	if (oldone->command != NULL)
		{
			free(oldone->command);
		}
	if (oldone->status != NULL)
	{
		free(oldone->status);
	}
	free(oldone);
  return;
}

void *process_default_constructor(void) { return calloc(1,sizeof(process)); }

vector *process_vector_create() {
return vector_create(process_copy_constructor, process_destructor,
                       process_default_constructor);
}

void changeDir(char* dEst)
{
if(dEst != '/')
{
dEst = get_full_path(dEst);
}
int valid;
valid = chdir(dEst);
if(valid != 0)
{
	print_no_directory(dEst);
}
return;
}

void ExtCommand(char* commd,char** argV,size_t number, int BK)
{	
	pid_t child = fork();
	if(child == -1)
	{
		print_fork_failed();
		exit(1);
	}

	if(child!=0)
	{
		process* newchild;
		newchild->command = commd;
		newchild->status = "STATUS_RUNNING";
		newchild->pid = child;
		vector_push_back(processeS,newchild);
		if(BK == 0)
		{
		int status;
		waitpid(child,&status,0);
		}
	}
	else	
	{
		//free
	vector_destroy(processeS);

	execvp(commd,argV);
	print_exec_failed();
	return;
	}
}


int biuldInCommand(char* commd,char** argV,size_t number)
{
if(strcmp(commd,"cd") == 0)
{
	if(number != 1)
		print_invalid_command(commd);
	else
		changeDir(argV[1]);
		return 1;
}

if(strcmp(commd,"ps") == 0)
{
	if(number != 0)
		print_invalid_command(commd);
	else
		{
		for(int i = 0; i < vector_size(processeS);i++)
		{
			process* theOne = vector_get(processeS,i);
			if(strcmp("STATUS_RUNNING",theOne->status) == 0)
			{
				print_process_info(theOne->status,theOne->pid,theOne->command);
			}
		}
		}

		return 1;
}

if(strcmp(commd,"kill") == 0)
{	
	
	if(number != 1)
		print_invalid_command(commd);
	else
	{
		int valid;
		int id = atoi(argV[1]);
		valid = kill(id,SIGTERM);
	if(valid != 0)
		print_no_process_found(id);
	else
	{	
		process* theOne;
		int id = atoi(argV[1]);
		int loc;
		//char* temp;
		for(int i = 0; i < vector_size(processeS);i++)
		{	
			theOne = (process*)vector_get(processeS,i);
			if(id == theOne->pid)
			{
				loc = i;
				//temp = theOne->command;
				break;
			}
		}
		print_killed_process(id, theOne->command);
		vector_erase(processeS, loc);
	}
	}

	return 1;
}

if(strcmp(commd,"stop") == 0)
{
	if(number != 1)
		print_invalid_command(commd);
	else
	{
		process* theOne;
		int valid;
		int id = atoi(argV[1]);
		valid = kill(id,SIGSTOP);
	if(valid != 0)
		print_no_process_found(id);
	else
	{	
		int id = atoi(argV[1]);
		int loc;
		//char* temp;
		for(int i = 0; i < vector_size(poID);i++)
		{
			theOne = (process*)vector_get(processeS,i);
			if(id == theOne->pid)
			{
				loc = i;
				//temp = theOne->command;
				break;
			}
		}
		print_stopped_process(id, theOne->command);
		strcpy(theOne->status,"STATUS_STOPPED");
	}
	}

	return 1;
}

if(strcmp(commd,"cont") == 0)
{
	if(number != 1)
		print_invalid_command(commd);
	else
	{
		process* theOne;
		int valid;
		int id = atoi(argV[1]);
		valid = kill(id,SIGCONT);
	if(valid != 0)
		print_no_process_found(id);
	else
	{	int id = atoi(argV[1]);
		int loc;
		//char* temp;
		for(int i = 0; i < vector_size(poID);i++)
		{
			theOne = (process*)vector_get(processeS,i);	
			if(id == theOne->pid)
			{
				loc = i;
				//temp = theOne->command;
				break;
			}
		}
		print_stopped_process(id, theOne->command);
		strcpy(theOne->status,"STATUS_RUNNING");
	}
	}

	return 1;
}

return 0;
//exit 
}

void cleanOther(int signal) {
  int status;
  while(vector_size(processeS)>1)
  {
  	process* needKill = vector_get(processeS,1);
  	kill(needKill->pid,SIGTERM);
  	vector_erase(processeS,1);
  }
}


int shell(int argc, char *argv[]) {
  // TODO: This is the entry point for your shell.
  if(argc!=1 && argc !=3)
  	{
  		print_usage();
  		return 0;
  	}

  	//storing process
  	vector* processeS = process_vector_create();//need free
  	
   signal(SIGINT, cleanOther);//where should i put

  FILE* file_I;
  if(argc == 3)
  {
  if((strcmp(argv[1],"-f") != 0))
  	{
  		print_usage();
  		return 0;
  	}//user using eror
  //vector * Commands = char_vector_create();
  char* file_name = argv[2];
  file_I = fopen(file_name,"r");
  }
  else
  {
  	file_I = stdin;
  	//file_name = "shell.c";
	}
  if(file_I == NULL)
  {
  	print_script_file_error();
  	return 0;
  }
    
  char *file_buf = NULL;
  size_t n;
  ssize_t read = 0;
  size_t lines = 1;
  pid_t curr = getpid();
  
  process P;
  char* Pcm = "parent";
  char* Pst = "STATUS_RUNNING";
  P.command = Pcm;
  P.status = Pst;
  P.pid = curr;
  vector_push_back(processeS,P);
  
  char* buf;
  getcwd(buf);//Need to free
  //print_prompt(, curr);
  print_prompt(buf,curr);
   free(buf);
   buf = NULL;

  while ((read = getline(&file_buf, &n, file_I)) != -1)
  	{
    size_t len = strlen(file_buf);
    char temp[1000];
    strcpy(temp,file_buf);
    if(temp[len-1] == '\n')
    temp[len-1] = '\0';
	
	size_t number = 0;
	char ** cmdptr = strsplit(temp, " ", &number);//need Free!
	
	process* theOne = vector_get(processeS,0);
	//change process command status, assume parent at 0
	char* cld = strdup(cmdptr[0]);
	if(theOne->command != NULL)
	free(theOne->command);
	theOne->command = cld;
	
	int internal = biuldInCommand(cmdptr[0],cmdptr,number - 1);
	
	//external Command
	if(internal == 0)
	{
		char* Las = cmdptr[number-1];
		if(Las[strlen(Las)-1] == '&')
		{
		ExtCommand(cmdptr[0],cmdptr,number - 1,1);
		Las[strlen(Las)-1] = '\0';
		}
		else	
		ExtCommand(cmdptr[0],cmdptr,number - 1,0);
	}

	free_args(cmdptr);
	curr = getpid();
	getcwd(buf);
	print_prompt(buf,curr);
	free(buf);
   	buf = NULL;
    lines++;
   	}
  //	kill(0,)
   
   

  return 0;
}
