/**
 * Splendid Synchronization Lab 
 * CS 241 - Spring 2017
 */
#include "queue.h"
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * This queue is implemented with a linked list of queue_node's.
 */


queue *queue_create(ssize_t max_size, copy_constructor_type copy_constructor,
                    destructor_type destructor) {
  queue* r = malloc(sizeof(queue));
  r->copy_constructor = copy_constructor;
  r->destructor = destructor;
  if(max_size == 0)
    r->max_size = -5;
  else
    r->max_size = max_size;
  r->size = 0;
  r->head = NULL;
  r->tail = NULL;
  pthread_mutex_init(&r->m, NULL);
  pthread_cond_init(&r->cv, NULL);
  /* Your code here */
  return r;
}

void queue_destroy(queue *this) { 
  queue_node *p = this->head;
  while(p!=NULL)
  {
    this->destructor(p->data);
    queue_node *t = p;
    p = p->next;
    free(t);
  }
  pthread_mutex_destroy(&this->m);
  pthread_cond_destroy(&this->cv);
  free(this);
/* Your code here */ }

void queue_push(queue *this, void *data) { 
/* Your code here */ 
pthread_mutex_lock(&this->m);
while(this->size == this->max_size)
{
  pthread_cond_wait(&this->cv, &this->m);
}
queue_node* bPushed = malloc(sizeof(queue_node));
bPushed->data = this->copy_constructor(data);

if(this->size == 0)
{
  this->head = bPushed;
  this->tail = bPushed;
  bPushed->next = NULL;
}
  else
{
  this->tail->next = bPushed;
  bPushed->next = NULL;
  this->tail = bPushed;
}
this->size++;
//printf("size is %zd\n",this->size);
//fflush(stdout);
pthread_cond_broadcast(&this->cv);
pthread_mutex_unlock(&this->m);

}

void *queue_pull(queue *this) {
  pthread_mutex_lock(&this->m);
  while(this->size == 0)
{
  pthread_cond_wait(&this->cv, &this->m);
}
queue_node *bPulled = this->head;
this->head = this->head->next;
this->size--;
//printf("size reduced to %zd\n", this->size);
//fflush(stdout);
pthread_cond_broadcast(&this->cv);
pthread_mutex_unlock(&this->m);

void* d = this->copy_constructor(bPulled->data);
this->destructor(bPulled->data);

free(bPulled);
  /* Your code here */
  return d;
}


// The following is code generated:

queue *char_queue_create() {
  return queue_create(-1, char_copy_constructor, char_destructor);
}
queue *double_queue_create() {
  return queue_create(-1, double_copy_constructor, double_destructor);
}
queue *float_queue_create() {
  return queue_create(-1, float_copy_constructor, float_destructor);
}
queue *int_queue_create() {
  return queue_create(-1, int_copy_constructor, int_destructor);
}
queue *long_queue_create() {
  return queue_create(-1, long_copy_constructor, long_destructor);
}
queue *short_queue_create() {
  return queue_create(-1, short_copy_constructor, short_destructor);
}
queue *unsigned_char_queue_create() {
  return queue_create(-1, unsigned_char_copy_constructor,
                      unsigned_char_destructor);
}
queue *unsigned_int_queue_create() {
  return queue_create(-1, unsigned_int_copy_constructor,
                      unsigned_int_destructor);
}
queue *unsigned_long_queue_create() {
  return queue_create(-1, unsigned_long_copy_constructor,
                      unsigned_long_destructor);
}
queue *unsigned_short_queue_create() {
  return queue_create(-1, unsigned_short_copy_constructor,
                      unsigned_short_destructor);
}
