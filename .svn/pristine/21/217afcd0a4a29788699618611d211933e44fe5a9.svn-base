/**
 * Scheduler Lab
 * CS 241 - Spring 2017
 */
#include "libpriqueue.h"
#include "libscheduler.h"

static priqueue_t pqueue;
static core_t core;
static scheme_t scheme;
static int (*comparison_func)(const void *, const void *);

int comparer_fcfs(const void *a, const void *b) { return 0; }

int break_tie(const void *a, const void *b) { return comparer_fcfs(a, b); }

int comparer_ppri(const void *a, const void *b) {
    // Complete as is
    return comparer_pri(a, b);
}

int comparer_pri(const void *a, const void *b) { return 0; }

int comparer_plrtf(const void *a, const void *b) { return 0; }

int comparer_rr(const void *a, const void *b) { return 0; }

int comparer_sjf(const void *a, const void *b) { return 0; }

void scheduler_start_up(scheme_t s) {
    switch (s) {
    case FCFS:
        comparison_func = comparer_fcfs;
        break;
    case PRI:
        comparison_func = comparer_pri;
        break;
    case PPRI:
        comparison_func = comparer_ppri;
        break;
    case PLRTF:
        comparison_func = comparer_plrtf;
        break;
    case RR:
        comparison_func = comparer_rr;
        break;
    case SJF:
        comparison_func = comparer_sjf;
        break;
    default:
        printf("Did not recognize scheme\n");
        exit(1);
    }
    priqueue_init(&pqueue, comparison_func);
}

bool scheduler_new_job(int job_number, unsigned time, unsigned running_time,
                       int priority) {
    return false;
}

int scheduler_job_finished(int job_number, unsigned time) { return 9001; }

int scheduler_quantum_expired(unsigned time) { return 9001; }

float scheduler_average_waiting_time() { return 9001; }

float scheduler_average_turnaround_time() { return 9001; }

float scheduler_average_response_time() { return 9001; }

void scheduler_clean_up() { priqueue_destroy(&pqueue); }

void scheduler_show_queue() {
    // This function is left entirely to you! Totally optional.
}
