/**
 * Machine Problem: Malloc
 * CS 241 - Spring 2017
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <math.h>

typedef struct _meta_data {
  void* ptr;
  size_t size;
  int free;
  struct _meta_data *next;
  struct _meta_data *prev;
  
} meta_data;

meta_data *head = NULL;
meta_data *tail = NULL;


void extractptr(meta_data *prev,meta_data *this, meta_data *next)
{
  if(prev == NULL && next == NULL)
    return;
  if(prev == NULL)
  {
    next->prev = NULL;
    return;
  }
  if(next == NULL)
  {
    prev->next = NULL;
    return;
  }

  prev->next = next;
  next->prev = prev;

}

/**
 * Allocate space for array in memory
 *
 * Allocates a block of memory for an array of num elements, each of them size
 * bytes long, and initializes all its bits to zero. The effective result is
 * the allocation of an zero-initialized memory block of (num * size) bytes.
 *
 * @param num
 *    Number of elements to be allocated.
 * @param size
 *    Size of elements.
 *
 * @return
 *    A pointer to the memory block allocated by the function.
 *
 *    The type of this pointer is always void*, which can be cast to the
 *    desired type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory, a
 *    NULL pointer is returned.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/calloc/
 */
void *calloc(size_t num, size_t size) {
	void* result = malloc(num*size);
	memset(result,0,num*size);
  // implement calloc!
  return NULL;
}

/**
 * Allocate memory block
 *
 * Allocates a block of size bytes of memory, returning a pointer to the
 * beginning of the block.  The content of the newly allocated block of
 * memory is not initialized, remaining with indeterminate values.
 *
 * @param size
 *    Size of the memory block, in bytes.
 *
 * @return
 *    On success, a pointer to the memory block allocated by the function.
 *
 *    The type of this pointer is always void*, which can be cast to the
 *    desired type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory,
 *    a null pointer is returned.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/
 */

void* memoryenLarge(size_t size){
  meta_data* chosen = sbrk(0);
  sbrk(sizeof(meta_data));
  chosen->ptr = sbrk(0);
  if(sbrk(size) == (void*)-1)
    return NULL;
  chosen->size = size;
  chosen->free = 1;
  chosen->prev = NULL;
  chosen->next = head;
  if(head!=NULL)
  head->prev = chosen;
  else 
    tail = chosen;
  head = chosen;
  return (void*)chosen;
}


void *malloc(size_t size) {
  // implement malloc!
  meta_data *p = head;
  meta_data *chosen = NULL;
  size_t capacity = 0;

  while(p!= NULL)
  {
    if(p->free == 0)
      break;
  	if(p->free && p->size >= size)
  	{
  		//if(chosen == NULL||(chosen&&p->size < chosen->size))
  			chosen = p;
  			break;
  	}

    capacity+= p->size+sizeof(meta_data);
    if(capacity >= sizeof(meta_data)+size)
    {
      head->next = p->next;
      if(p->next != NULL)
        p->next->prev = head;
      if(p == tail)
        tail = head;
      chosen = head;
      chosen->size = capacity-sizeof(meta_data);
      break;
    }
  	p = p->next;
  }

  if(chosen == NULL)
  {
    size_t enlargeNumber;
    
    if(size > 1000000)
      enlargeNumber = size;
	   else if (size > 1000)
	   enlargeNumber = size*10;
    else if(size < 10)
      enlargeNumber = size*100000;
    else
      enlargeNumber = 1000*size;

  	chosen = (meta_data*)memoryenLarge(enlargeNumber);
  }
    
    //split space
    if(chosen->size - size > sizeof(meta_data))
    {
      meta_data* newMt = (meta_data*)((char*)chosen+sizeof(meta_data)+size);
      fprintf(stderr,"address if %p and top %p\n",(void*)newMt,sbrk(0));
      newMt->size = chosen->size - size - sizeof(meta_data);
      newMt->free = 1;
      meta_data* temp = newMt + 1;
      newMt->ptr = (void*)temp;
      temp = chosen->next;
      chosen->next = newMt;
      newMt->next = temp;
      newMt->prev = chosen;
      chosen->size = size;
      if(temp!=NULL)
        temp->prev = newMt;
      if(chosen == tail)
        newMt = tail;
    }


    chosen->free = 0;

    if(chosen->next != NULL)
    head = chosen->next;

    extractptr(chosen->prev,chosen,chosen->next);
    
    if(tail!=chosen)
    {
      tail->next = chosen;
      chosen->prev = tail;
      chosen->next = NULL;
      tail = chosen;
    }
  	//chosen size??
  	return chosen->ptr;
  

  
}

/**
 * Deallocate space in memory
 *
 * A block of memory previously allocated using a call to malloc(),
 * calloc() or realloc() is deallocated, making it available again for
 * further allocations.
 *
 * Notice that this function leaves the value of ptr unchanged, hence
 * it still points to the same (now invalid) location, and not to the
 * null pointer.
 *
 * @param ptr
 *    Pointer to a memory block previously allocated with malloc(),
 *    calloc() or realloc() to be deallocated.  If a null pointer is
 *    passed as argument, no action occurs.
 */
void free(void *ptr) {
  if(ptr == NULL)
  	return;
  meta_data* p = (meta_data*)ptr - 1;// implement free!
  p->free = 1;
  meta_data* n = p->next;
  meta_data* r = p->prev;
  //merge

if(n!=NULL)
   {
   	if(n->free)
   	{
   		p->next = n->next;
   		if(n->next != NULL)
   			n->next->prev = p;
   		p->size += (n->size + sizeof(meta_data));
   	}

   }
   n = p->next;

  if(r != NULL)
  {
  	if(r->free)
  	{
  		r->next = n;
  		if(n!=NULL)
  			n->prev = r;
  		r->size += (p->size+sizeof(meta_data));

      
      if(r!=head)
      {
      extractptr(r->prev,r,r->next);
      r->next = head;
      r->prev = NULL;
      if(head!=NULL)
        head->prev = r;
      head = r;
      }
      return;
    }

   }

   if(p!=head)
      {
      extractptr(p->prev,p,p->next);
      p->next = head;
      p->prev = NULL;
      if(head!=NULL)
        head->prev = p;
      head = p;
    }




}

/**
 * Reallocate memory block
 *
 * The size of the memory block pointed to by the ptr parameter is changed
 * to the size bytes, expanding or reducing the amount of memory available
 * in the block.
 *
 * The function may move the memory block to a new location, in which case
 * the new location is returned. The content of the memory block is preserved
 * up to the lesser of the new and old sizes, even if the block is moved. If
 * the new size is larger, the value of the newly allocated portion is
 * indeterminate.
 *
 * In case that ptr is NULL, the function behaves exactly as malloc, assigning
 * a new block of size bytes and returning a pointer to the beginning of it.
 *
 * In case that the size is 0, the memory previously allocated in ptr is
 * deallocated as if a call to free was made, and a NULL pointer is returned.
 *
 * @param ptr
 *    Pointer to a memory block previously allocated with malloc(), calloc()
 *    or realloc() to be reallocated.
 *
 *    If this is NULL, a new block is allocated and a pointer to it is
 *    returned by the function.
 *
 * @param size
 *    New size for the memory block, in bytes.
 *
 *    If it is 0 and ptr points to an existing block of memory, the memory
 *    block pointed by ptr is deallocated and a NULL pointer is returned.
 *
 * @return
 *    A pointer to the reallocated memory block, which may be either the
 *    same as the ptr argument or a new location.
 *
 *    The type of this pointer is void*, which can be cast to the desired
 *    type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory,
 *    a NULL pointer is returned, and the memory block pointed to by
 *    argument ptr is left unchanged.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/realloc/
 */
void *realloc(void *ptr, size_t size) {
  // implement realloc!
 if(ptr == NULL && size == 0)
    return NULL;
  if(ptr == NULL)
    return malloc(size);
  
  if(size == 0)
  {
    free(ptr);
    return NULL;
  }

  

  meta_data* p = (meta_data*)ptr - 1;

if(size == p->size)
    return ptr;

//whether reduce
  if(size < p->size)
{
  if(p->size - size > sizeof(meta_data))
  {
      meta_data* newMt = (meta_data*)((char*)p+sizeof(meta_data)+size);
      newMt->size = p->size - size - sizeof(meta_data);
      newMt->free = 1;
      meta_data* temp = newMt + 1;
      newMt->ptr = (void*)temp;
      
      newMt->prev = NULL;
      newMt->next = head;
      head->prev = newMt;
      head = newMt;
      p->size = size;
      return ptr;
  }



  else 
   return ptr; 
}


//whether enough after
  if(p->next != NULL)
  {
  	if(p->next->free&&(p->next->size+p->size+sizeof(meta_data))>=size)
  	{
  		p->next = p->next->next;
  		if(p->next!=NULL)
  		{
  			p->next->prev = p;
  		}
  		return p->ptr;
  	}
  }

  void* newspace = malloc(size);
  memmove(newspace,ptr,fmin(p->size,size));
  p->free = 1;

  return newspace;
}
